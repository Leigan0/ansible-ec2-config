---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: webservers_sg
    image: ami-0922553b7b0369273
    keypair: ansible-kp2
    ansible_ssh_user: ec2-user
    region: us-east-1
    count: 1
    
  vars_files:
    - aws_keys.yml
  pre_tasks:
  - name: Ensure boto and boto3 modules are installed
    pip:
      name: "{{ item }}"
    with_items:
    - boto3
    - botocore
  tasks:
      - name: Create a security group
        ec2_group:
          name: "{{ security_group }}"
          description: The webservers security group
          region: "{{ region }}"
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key}}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
              - proto: all
                cidr_ip: 0.0.0.0/0

      - name: Launch the new EC2 Instance
        ec2:
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          group: "{{ security_group }}"
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          wait: true
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: "{{ count }}"
        register: ec2

      - name: Add the newly created host so that we can contact it later
        add_host: 
          name: "{{ item.public_ip }}"
          groups: webservers
        with_items: "{{ ec2.instances }}"

      - name: Add tags to instance(s)
        ec2_tag:
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          region: "{{ region }}"
          resource: "{{ item.id }}"
          state: "present"
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Type: webserver
            Name: testec2

      - name: Wait for SSH to come up
        delegate_to: "{{ item.public_dns_name }}"
        wait_for_connection:
          delay: 60
          timeout: 320
        with_items: "{{ ec2.instances }}"

- hosts: webservers
  gather_facts: no
  remote_user: root
  become: yes 
  vars:
    ansible_ssh_user: ec2-user
  tasks:
      - name: Install python & httpd
        yum: pkg={{item}} state=installed
        with_items:
          - python-devel
          - httpd
      - name: start httpd
        service: name=httpd state=started
    
# - name: Terminate instances
#   hosts: webservers
#   tasks:
#     - name: Terminate instances that were previously launched
#       ec2:
#         region: "{{ region }}"
#         state: 'absent'
#         instance_ids: '{{ ec2.instance_ids }}'

