---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    ansible_ssh_user: ec2-user

  pre_tasks:
  - name: Ensure boto and boto3 modules are installed
    pip:
      name: "{{ item }}"
    with_items:
    - boto3
    - botocore
  tasks:
      - name: Include AWS vars
        include_vars:
          dir:  vars
      
      - name: Create a security group
        ec2_group:
          name: "{{ temp_server.security_group }}"
          description: The webservers security group
          region: "{{ temp_server.region }}"
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key}}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
              - proto: all
                cidr_ip: 0.0.0.0/0

      - name: Launch the new EC2 Instance
        ec2:
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          group: "{{ temp_server.security_group }}"
          instance_type: "{{ temp_server.instance_type }}"
          image: "{{ temp_server.image }}"
          wait: true
          instance_tags: "{{temp_server.tags}}"
          region: "{{ temp_server.region }}"
          keypair: "{{ temp_server.keypair }}"
          count: "{{ temp_server.count }}"

        register: ec2

      - name: Add the newly created host so that we can contact it later
        add_host: 
          name: "{{ item.public_ip }}"
          groups: webservers
          ansible_ssh_user: ec2-user
          ansible_ssh_private_key_file: ~/Downloads/ansible-kp2.pem
          ansible_become_method: sudo
          ansible_become_user: root
        with_items: "{{ ec2.instances }}"

      - name: Wait for SSH to come up
        delegate_to: "{{ item.public_dns_name }}"
        wait_for_connection:
          delay: 60
          timeout: 320
        with_items: "{{ ec2.instances }}"

- hosts: webservers
  gather_facts: no
  remote_user: root
  become: yes 
  vars:
    ansible_ssh_user: ec2-user
  tasks:
      - name: Install python & httpd
        yum: pkg={{item}} state=installed
        with_items:
          - python-devel
          - httpd
      - name: start httpd
        service: name=httpd state=started